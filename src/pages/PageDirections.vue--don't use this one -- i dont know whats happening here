<template>
	<div v-if="asyncDataStatus_ready" class="col-large push-top">
		<h1>{{bar.title}}
			<router-link
			:to="{name: 'PageBarEdit', id: this.id}"
			class="btn-green btn-small"
			tag="button"
			>
			Edit Bar	
			</router-link>
		</h1>
<!-- 		<FavoriteList 
		:favorites="favorites"/>
		<FavoriteEditor
		v-if="authUser"
		:barId="id"
		/> -->
	<!-- 	<div v-else class="text-center" style="margin-bottom: 50px">
			<router-link :to="{name: 'PageLogin', query: {redirectTo: $route.path}}">Login</router-link> or
			<router-link :to="{name: 'PageRegister', query: {redirectTo: $route.path}}">Register</router-link> to favorite a reply.
		</div> -->
		<p>
			By <a href="#" class="link-unstyled">{{user.name}}</a>, <AppDate :timestamp="bar.publishedAt" />.
			<span style="float: right; margin-top: 2px;" class="hide-mobile text-faded text-small">{{repliesCount }} replies by {{ contributorsCount }} contributors
			</span>
		</p>
	</div>
</template>

<script>
	import {mapActions, mapGetters} from 'vuex'
	import FavoriteList from '@/components/FavoriteList'
	import FavoriteEditor from '@/components/FavoriteEditor'
	import {countObjectProperties} from '@/utils'
	import asyncDataStatus from '@/mixins/asyncDataStatus'

	export default {
		components: {
			FavoriteList,
			FavoriteEditor
		},

		props: {
			id: {
				require: true,
				type: String
			}
		},

		mixins: [asyncDataStatus],

		computed: {
			...mapGetters({
				authUser: 'auth/authUser'
			}),

			bar () {
				return this.$store.state.bars.items[this.id]
			},

			repliesCount () {
				return this.$store.getters['bars/barRepliesCount'](this.bar['.key'])
			},

			user () {
				return this.$store.state.users.items[this.bar.userId]
			},

			contributorsCount () {
				return countObjectProperties(this.bar.contributors)
			},

			// favorites () {
			// 	const favoriteIds = Object.values(this.bar.favorites)
			// 	return Object.values(this.$store.state.favorites.items)
			// 	.filter(favorite => favoriteIds.includes(favorite['.key']))
			// }
		},

		methods: {
			...mapActions('bars', ['fetchBar']),
			...mapActions('users', ['fetchUser']),
			...mapActions('favorites', ['fetchFavorites'])
		},

		created () {
			// fetch bar
			this.fetchBar({id: this.id})
			.then(bar => {
				// fetch user
				this.fetchUser({id: bar.userId})
				return this.fetchFavorites({ids: Object.keys(bar.favorites)})
			})
			.then(favorites => {
				return Promise.all(favorites.map(favorite => {
					this.fetchUser({id: favorite.userId})
				}))
			})
			.then(() => {
					this.asyncDataStatus_fetched()
			})
		}
	}
</script>